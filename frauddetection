# --- Credit Card Fraud Detection using Naive Bayes ---
# Google Colab Compatible

# 1. Install dependencies (if needed)
# !pip install scikit-learn pandas matplotlib seaborn

# 2. Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# 3. Load Dataset (upload in Colab)
from google.colab import files
uploaded = files.upload()

df = pd.read_csv("creditcard.csv")
print("Dataset shape:", df.shape)
print(df.head())

# 4. Check Class Distribution
print(df["Class"].value_counts())
sns.countplot(x="Class", data=df)
plt.title("Class Distribution (0 = Non-Fraud, 1 = Fraud)")
plt.show()

# 5. Handle Imbalance using Undersampling
fraud = df[df["Class"] == 1]
non_fraud = df[df["Class"] == 0].sample(len(fraud))  # sample same number of non-fraud as fraud
balanced_df = pd.concat([fraud, non_fraud])

print("Balanced dataset shape:", balanced_df.shape)
sns.countplot(x="Class", data=balanced_df)
plt.title("Balanced Dataset")
plt.show()

# 6. Split Features and Labels
X = balanced_df.drop("Class", axis=1)
y = balanced_df["Class"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 7. Train Naive Bayes Classifier
model = GaussianNB()
model.fit(X_train, y_train)

# 8. Predictions
y_pred = model.predict(X_test)

# 9. Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=["Non-Fraud", "Fraud"],
            yticklabels=["Non-Fraud", "Fraud"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

